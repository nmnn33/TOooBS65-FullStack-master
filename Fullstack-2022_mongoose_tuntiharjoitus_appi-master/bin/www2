#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
require("dotenv").config();
/* Otetaan moduuli käyttöön */
var mongoose = require("mongoose");
/* Määritellään yhteysosoite */
var user = process.env.DB_USER
var salis = process.env.DB_PASS
const uri = "mongodb+srv://" + user + ":" + salis + "@cluster0.anqd5.mongodb.net/mongoosedemo?retryWrites=true&w=majority";

/* Luodaan yhteys */
mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });

var db = mongoose.connection;

/* Tulostetaan tieto yhteyden onnistumisesta tai virheestä - huomaa syntaksi ja anonyymi funktio*/
db.on("error", () => console.log("Yhteysvirhe!:"));

db.once("open", function () {
  console.log("Yhteys on muodostettu!");
});

/* Määritellään User-niminen Schema, eli tietomalli taulukkoon tallennettavista olioista */
const User = mongoose.model("User", {
  username: String,
  password: Number,
  birthday: Date
});

/* Luodaan uusi tallennettava olio */
var newUser = new User({
  username: "iivoniskanen",
  password: 12345678,
  birthday: '2003-12-24'
});

// Tallennetaan olio tietokantaan
newUser.save(function (err, user) {
  if (err) return console.log(err);
  console.log(newUser);
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
